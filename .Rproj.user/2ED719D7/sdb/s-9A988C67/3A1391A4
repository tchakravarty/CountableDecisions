{
    "contents" : "#==========================================================\n# Elastic net models: \n# 1. create n-fold validation samples\n# 2. assess accuracy over fitting these models\n# 3. vary the parameters\n#   - the degree of missingness allowed in the model\n#   - \n# 4. \n#==========================================================\n# model 1.1: only use the variables for which the missingness is < 0.25\nvCov1.1 = vCovariates[vMissing < 0.2]\n\n# the categorical covariates to retain in the model --> as.factor\nvCovariatesC1.1 = intersect(vCovariatesC, vCov1.1)\ndfTrain1.1 = dfTrain[, c(\"service_a\", vCov1.1)]\ndfTrain1.1 = dfTrain1.1[complete.cases(dfTrain1.1), ]\ndfTrain1.1[, vCovariatesC1.1] = lapply(dfTrain1.1[, vCovariatesC1.1], as.factor)\nvCov1.1 = setdiff(vCov1.1, names(which(sapply(dfTrain1.1[, vCovariatesC1.1], nlevels) == 1)))\ndfTrain1.1 = dfTrain1.1[ , c(\"service_a\", vCov1.1)]\n\nliGLMNet1.1 = lapply(vLabels, function(label) {\n  fLogit1.1 = as.formula(paste(label, \"~\", paste0(vCov1.1, collapse = \"+\")))\n  \n  cv.glmnet(x = model.matrix(fLogit1.1, data = dfTrain1.1), \n            y = model.response(fLogit1.1, data = dfTrain1.1),\n            family = \"binomial\", type.measure = \"auc\", nfolds = 5)\n})",
    "created" : 1425480494201.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3591272840",
    "id" : "3A1391A4",
    "lastKnownWriteTime" : 1425481392,
    "path" : "~/Projects/Personal/Kaggle/drivendata-CountableDecisions/Code/02-GLMNetModels.R",
    "project_path" : "Code/02-GLMNetModels.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}