{
    "contents" : "#==========================================================\n# logit models: \n# 1. create n-fold validation samples\n# 2. assess accuracy over fitting these models\n# 3. vary the parameters\n#   - the degree of missingness allowed in the model\n#   - \n# 4. \n#==========================================================\nlibrary(ROCR)\nlibrary(pROC)\n\n#==========================================================\n# function: modeling data for missingness threshold\n#==========================================================\nmakeModelData = function(dfOriginal, threshMiss = 0.2) {\n  vCovariatesN = grep(\"^n_\", names(dfOriginal), value = TRUE)\n  vCovariatesC = grep(\"^c_\", names(dfOriginal), value = TRUE)\n  vCovariatesO = grep(\"^o_\", names(dfOriginal), value = TRUE)\n  vCovariates = c(vCovariatesC, vCovariatesN, vCovariatesN)\n  vLabels = grep(\"^service_\", names(dfOriginal), value = TRUE)\n  \n  vMissing = sapply(dfOriginal[, vCovariates], function(x) mean(is.na(xn  vCovFinal = vCovariates[vMissing < 0.2]\n  \n  # the categorical covariates to retain in the model --> as.factor\n  vCovariatesCFinal = intersect(vCovariatesC, vCovFinal)\n  dfFinal = dfOriginal[, c(vLabels, vCovFinal)]\n  dfFinal = dfFinal[complete.cases(dfFinal), ]\n  dfFinal[, vCovariatesCFinal] = lapply(dfFinal[, vCovariatesCFinal], as.factor)\n  vCovFinal = setdiff(vCovFinal, names(which(sapply(dfFinal[, vCovariatesCFinal], nlevels) == 1)))\n  dfFinal = dfFinal[ , c(vLabels, vCovFinal)]\n  return(list(data = dfFinal, covariates = vCovFinal))\n}\n\n\n#==========================================================\n# model: only use the variables for which the missingness is < 0.2\n#==========================================================\nmodelDataLogit = makeModelData(dfTrain, 0.2)\ndfTrainLogit = modelDataLogit$data\nvCovLogit = modelDataLogit$covariates\nliLogit = lapply(vLabels, function(label) {\n  glm(as.formula(paste(label, \"~\", paste0(vCovLogit, collapse = \"+\"))), \n          data = dfTrainLogit, family = binomial(link = logit))\n})\n\n#=========================================================\n# score the models and compute accuracy\n#=========================================================\ncomputeAccMetric = function(modelObject, modelData, accuracyMetric) {\n  predResponse = predict.glm(object = x, newdata = dfTrainLogit, type = \"response\")  \n  predROCR = prediction(predResponse, )\n\n}\nlapply(liLogit, function(x) {\n  predict.glm(object = x, newdata = dfTrainLogit, type = \"response\")  \n})",
    "created" : 1425480226726.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4218656567",
    "id" : "6A0AAA2E",
    "lastKnownWriteTime" : 1425527027,
    "path" : "~/Projects/Personal/Kaggle/drivendata-CountableDecisions/Code/01-LogitModels.R",
    "project_path" : "Code/01-LogitModels.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}