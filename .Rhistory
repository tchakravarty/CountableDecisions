lapply(ls(), object.size
)
ls()
temp2
temp2 = temp[, which(sapply(temp, is.factor))]
which(sapply(temp, is.factor))
rm(list = ls())
# load the data
dfTrainValues = read.csv("Data/cef07265-8623-4680-b501-a5688f5babb0/train_values.csv")
dfTrainLabels = read.csv("Data/cef07265-8623-4680-b501-a5688f5babb0/train_labels.csv")
dfTrain = merge(dfTrainLabels, dfTrainValues, by = "id")
dfTestValues = read.csv("Data/cef07265-8623-4680-b501-a5688f5babb0/test_values.csv")
# create the regressor groups by name
vCovariatesN = grep("^n_", names(dfTrain), value = TRUE)
vCovariatesO = grep("^c_", names(dfTrain), value = TRUE)
vCovariatesC = grep("^o_", names(dfTrain), value = TRUE)
# check the categorical variables
dfTrain[, vCovariatesC] = lapply(dfTrain[, vCovariatesC], function(x) as.factor(x))
levelsCovariatesC = sapply(dfTrain[, vCovariatesC], nlevels)
hist(levelsCovariatesC, breaks = min(levelsCovariatesC):max(levelsCovariatesC))
vCovariatesC = grep("^c_", names(dfTrain), value = TRUE)
vCovariatesO = grep("^o_", names(dfTrain), value = TRUE)
dfTrain = merge(dfTrainLabels, dfTrainValues, by = "id")
dfTrain[, vCovariatesC] = lapply(dfTrain[, vCovariatesC], function(x) as.factor(x))
levelsCovariatesC = sapply(dfTrain[, vCovariatesC], nlevels)
hist(levelsCovariatesC, breaks = min(levelsCovariatesC):max(levelsCovariatesC))
vMissing = sapply(dfTrain[, vCovariates], function(x) mean(is.na(x)))
hist(vMissing)
plot(density(vMissing, from = 0, to = 1))
vMissing = sapply(dfTrain[, vCovariates], function(x) mean(is.na(x)))
vCovariates = c(vCovariatesC, vCovariatesN, vCovariatesN)
vMissing = sapply(dfTrain[, vCovariates], function(x) mean(is.na(x)))
hist(vMissing)
plot(density(vMissing, from = 0, to = 1))
vCov1.1 = vCovariates[vMissing < 0.2]
vCovariatesCateg1.1 = intersect(vCovariatesCateg, vCov1.1)
dfTrainCF = lapply(dfTrain[, vCovariatesC], function(x) as.factor(x))
levelsCovariatesC = sapply(dfTrainCF, nlevels)
hist(levelsCovariatesC, breaks = min(levelsCovariatesC):max(levelsCovariatesC))
dfTrain = merge(dfTrainLabels, dfTrainValues, by = "id")
vCov1.1 = vCovariates[vMissing < 0.2]
dfTrain1.1[, vCovariatesC1.1] = lapply(dfTrain1.1[, vCovariatesC1.1], as.factor)
dfTrain1.1 = dfTrain
dfTrain1.1[, vCovariatesC1.1] = lapply(dfTrain1.1[, vCovariatesC1.1], as.factor)
vCovariatesC1.1 = intersect(vCovariatesC, vCov1.1)
dfTrain1.1 = dfTrain
dfTrain1.1[, vCovariatesC1.1] = lapply(dfTrain1.1[, vCovariatesC1.1], as.factor)
#====================================================================
# purpose: data preparation and exploration for the drivedata.org "Countable Decisions"
#   problem
# author: tirthankar chakravarty
# created: 4th march 2015
# revised:
# comments:
# ISSUES:
# 1. logit regression failing because the number of levels of the factor
#   are less than 2 after omitting NAs.
# 2.
#====================================================================
rm(list = ls())
# load the data
dfTrainValues = read.csv("Data/cef07265-8623-4680-b501-a5688f5babb0/train_values.csv")
dfTrainLabels = read.csv("Data/cef07265-8623-4680-b501-a5688f5babb0/train_labels.csv")
dfTrain = merge(dfTrainLabels, dfTrainValues, by = "id")
dfTestValues = read.csv("Data/cef07265-8623-4680-b501-a5688f5babb0/test_values.csv")
# create the regressor groups by name
vCovariatesN = grep("^n_", names(dfTrain), value = TRUE)
vCovariatesC = grep("^c_", names(dfTrain), value = TRUE)
vCovariatesO = grep("^o_", names(dfTrain), value = TRUE)
vCovariates = c(vCovariatesC, vCovariatesN, vCovariatesN)
vLabels = grep("^service_", names(dfTrain), value = TRUE)
# check the categorical variables
dfTrainCF = lapply(dfTrain[, vCovariatesC], function(x) as.factor(x))
levelsCovariatesC = sapply(dfTrainCF, nlevels)
hist(levelsCovariatesC, breaks = min(levelsCovariatesC):max(levelsCovariatesC))
# get a sense of the missingness in the data
vMissing = sapply(dfTrain[, vCovariates], function(x) mean(is.na(x)))
hist(vMissing)
plot(density(vMissing, from = 0, to = 1))
#==========================================================
# logit models
#==========================================================
# model 1.1: only use the variables for which the missingness is < 0.25
vCov1.1 = vCovariates[vMissing < 0.2]
# the categorical covariates to retain in the model --> as.factor
vCovariatesC1.1 = intersect(vCovariatesC, vCov1.1)
dfTrain1.1 = dfTrain
dfTrain1.1[, vCovariatesC1.1] = lapply(dfTrain1.1[, vCovariatesC1.1], as.factor)
hist(sapply(dfTrain1.1[, vCovariatesC1.1], nlevels), breaks = 0:32)
min(sapply(dfTrain1.1[, vCovariatesC1.1], nlevels))
dfTrain1.1 = dfTrain1.1[, vCov1.1]
hist(sapply(dfTrain1.1[, vCovariatesC1.1], nlevels), breaks = 0:32)
liLogit1.1 = lapply(vLabels[1], function(label) {
try(glm(as.formula(paste0(label, "~", paste0(vCov1.1, collapse = "+"))),
data = dfTrain1.1), silent = TRUE)
})
liLogit1.1
dfTrain1.1 = dfTrain1.1[, c("service_a", vCov1.1)]
dfTrain1.1 = dfTrain
dfTrain1.1[, vCovariatesC1.1] = lapply(dfTrain1.1[, vCovariatesC1.1], as.factor)
dfTrain1.1 = dfTrain1.1[, c("service_a", vCov1.1)]
hist(sapply(dfTrain1.1[, vCovariatesC1.1], nlevels), breaks = 0:32)
liLogit1.1 = lapply(vLabels[1], function(label) {
try(glm(as.formula(paste0(label, "~", paste0(vCov1.1, collapse = "+"))),
data = dfTrain1.1), silent = TRUE)
})
liLogit1.1
dfTrain[, vLabels] = lapply(dfTrain[, vLabels], as.factor)
#====================================================================
# purpose: data preparation and exploration for the drivedata.org "Countable Decisions"
#   problem
# author: tirthankar chakravarty
# created: 4th march 2015
# revised:
# comments:
# ISSUES:
# 1. logit regression failing because the number of levels of the factor
#   are less than 2 after omitting NAs.
# 2.
#====================================================================
rm(list = ls())
# load the data
dfTrainValues = read.csv("Data/cef07265-8623-4680-b501-a5688f5babb0/train_values.csv")
dfTrainLabels = read.csv("Data/cef07265-8623-4680-b501-a5688f5babb0/train_labels.csv")
dfTrain = merge(dfTrainLabels, dfTrainValues, by = "id")
dfTestValues = read.csv("Data/cef07265-8623-4680-b501-a5688f5babb0/test_values.csv")
# create the regressor groups by name
vCovariatesN = grep("^n_", names(dfTrain), value = TRUE)
vCovariatesC = grep("^c_", names(dfTrain), value = TRUE)
vCovariatesO = grep("^o_", names(dfTrain), value = TRUE)
vCovariates = c(vCovariatesC, vCovariatesN, vCovariatesN)
vLabels = grep("^service_", names(dfTrain), value = TRUE)
# convert all the labels to factor variables
dfTrain[, vLabels] = lapply(dfTrain[, vLabels], as.factor)
# check the categorical variables
dfTrainCF = lapply(dfTrain[, vCovariatesC], function(x) as.factor(x))
levelsCovariatesC = sapply(dfTrainCF, nlevels)
hist(levelsCovariatesC, breaks = min(levelsCovariatesC):max(levelsCovariatesC))
# get a sense of the missingness in the data
vMissing = sapply(dfTrain[, vCovariates], function(x) mean(is.na(x)))
hist(vMissing)
plot(density(vMissing, from = 0, to = 1))
#==========================================================
# logit models
#==========================================================
# model 1.1: only use the variables for which the missingness is < 0.25
vCov1.1 = vCovariates[vMissing < 0.2]
# the categorical covariates to retain in the model --> as.factor
vCovariatesC1.1 = intersect(vCovariatesC, vCov1.1)
dfTrain1.1 = dfTrain
dfTrain1.1[, vCovariatesC1.1] = lapply(dfTrain1.1[, vCovariatesC1.1], as.factor)
dfTrain1.1 = dfTrain1.1[, c("service_a", vCov1.1)]
hist(sapply(dfTrain1.1[, vCovariatesC1.1], nlevels), breaks = 0:32)
lapply(vLabels[1], function(label) {
try(glm(as.formula(paste0(label, "~", paste0(vCov1.1, collapse = "+"))),
data = dfTrain1.1), silent = TRUE)
})
dfTrain1.1$service_a
is.factor(dfTrain1.1$service_a)
sapply(dfTrain1.1, function(x) sum(is.na(x)))
sapply(dfTrain1.1, function(x) mean(is.na(x)))
length(complete.cases(dfTrain1.1))
complete.cases(dfTrain1.1)
hist(sapply(dfTrain1.1[complete.cases(dfTrain1.1), vCovariatesC1.1], nlevels), breaks = 0:32)
conflicts(glm)
conflicts("")
conflicts("glm")
glm(as.formula(paste0("service_a", "~", paste0(vCov1.1, collapse = "+"))),
data = dfTrain1.1)
glm(as.formula(paste0("service_a", "~", paste0(vCov1.1, collapse = "+"))),
data = dfTrain1.1[complete.cases(dfTrain1.1), ])
debugonce(glm)
glm(as.formula(paste0("service_a", "~", paste0(vCov1.1, collapse = "+"))),
data = dfTrain1.1[complete.cases(dfTrain1.1), ])
?glm
?drop.unused.levels
lapply(vLabels[1], function(label) {
try(glm(as.formula(paste0(label, "~", paste0(vCov1.1, collapse = "+"))),
data = dfTrain1.1[complete.cases(dfTrain1.1), ], drop.unused.levels = FALSE), silent = TRUE)
})
lapply(vLabels[1], function(label) {
try(glm(as.formula(paste(label, "~", paste0(vCov1.1, collapse = "+"))),
data = dfTrain1.1[complete.cases(dfTrain1.1), ], drop.unused.levels = FALSE), silent = TRUE)
})
lapply(vLabels[1], function(label) {
try(glm(as.formula(paste(label, "~", paste0(vCov1.1, collapse = "+"))),
data = dfTrain1.1[complete.cases(dfTrain1.1), ]), silent = TRUE)
})
vCovariatesC1.1 = intersect(vCovariatesC, vCov1.1)
dfTrain1.1 = dfTrain[, c("service_a", vCov1.1)]
dfTrain1.1 = dfTrain1.1[complete.cases(dfTrain1.1), ]
dfTrain1.1[, vCovariatesC1.1] = lapply(dfTrain1.1[, vCovariatesC1.1], as.factor)
hist(sapply(dfTrain1.1[complete.cases(dfTrain1.1), vCovariatesC1.1], nlevels), breaks = 0:32)
lapply(vLabels[1], function(label) {
try(glm(as.formula(paste(label, "~", paste0(vCov1.1, collapse = "+"))),
data = dfTrain1.1[complete.cases(dfTrain1.1), ]), silent = TRUE)
})
dfTrainValues = read.csv("Data/cef07265-8623-4680-b501-a5688f5babb0/train_values.csv", stringsAsFactors = FALSE)
dfTrainLabels = read.csv("Data/cef07265-8623-4680-b501-a5688f5babb0/train_labels.csv", stringsAsFactors = FALSE)
dfTrain = merge(dfTrainLabels, dfTrainValues, by = "id")
dfTestValues = read.csv("Data/cef07265-8623-4680-b501-a5688f5babb0/test_values.csv")
vCovariatesN = grep("^n_", names(dfTrain), value = TRUE)
vCovariatesC = grep("^c_", names(dfTrain), value = TRUE)
vCovariatesO = grep("^o_", names(dfTrain), value = TRUE)
vCovariates = c(vCovariatesC, vCovariatesN, vCovariatesN)
vLabels = grep("^service_", names(dfTrain), value = TRUE)
dfTrain[, vLabels] = lapply(dfTrain[, vLabels], as.factor)
dfTrainCF = lapply(dfTrain[, vCovariatesC], function(x) as.factor(x))
levelsCovariatesC = sapply(dfTrainCF, nlevels)
hist(levelsCovariatesC, breaks = min(levelsCovariatesC):max(levelsCovariatesC))
vMissing = sapply(dfTrain[, vCovariates], function(x) mean(is.na(x)))
hist(vMissing)
plot(density(vMissing, from = 0, to = 1))
vCov1.1 = vCovariates[vMissing < 0.2]
# the categorical covariates to retain in the model --> as.factor
vCovariatesC1.1 = intersect(vCovariatesC, vCov1.1)
dfTrain1.1 = dfTrain[, c("service_a", vCov1.1)]
dfTrain1.1 = dfTrain1.1[complete.cases(dfTrain1.1), ]
dfTrain1.1[, vCovariatesC1.1] = lapply(dfTrain1.1[, vCovariatesC1.1], as.factor)
hist(sapply(dfTrain1.1[complete.cases(dfTrain1.1), vCovariatesC1.1], nlevels), breaks = 0:32)
sapply(dfTrain1.1[, vCovariatesC1.1], nlevels)
sort(sapply(dfTrain1.1[, vCovariatesC1.1], nlevels))
sort(sapply(dfTrain1.1[, vCovariatesC1.1], nlevels))[1:10]
which(sapply(dfTrain1.1[, vCovariatesC1.1], nlevels) == 1)
-dfTrain1.1 = dfTrain1.1[, which(sapply(dfTrain1.1[, vCovariatesC1.1], nlevels) == 1)]
dfTrain1.1 = dfTrain1.1[, -which(sapply(dfTrain1.1[, vCovariatesC1.1], nlevels) == 1)]
which(sapply(dfTrain1.1[, vCovariatesC1.1], nlevels) == 1)
vCov1.1 = vCovariates[vMissing < 0.2]
vCovariatesC1.1 = intersect(vCovariatesC, vCov1.1)
dfTrain1.1 = dfTrain[, c("service_a", vCov1.1)]
dfTrain1.1 = dfTrain1.1[complete.cases(dfTrain1.1), ]
dfTrain1.1[, vCovariatesC1.1] = lapply(dfTrain1.1[, vCovariatesC1.1], as.factor)
which(sapply(dfTrain1.1[, vCovariatesC1.1], nlevels) == 1)
head(vCov1.1)
names(sapply(dfTrain1.1[, vCovariatesC1.1], nlevels) == 1)
names(which(sapply(dfTrain1.1[, vCovariatesC1.1], nlevels) == 1))
vCov1.1 = setdiff(vCov1.1, names(which(sapply(dfTrain1.1[, vCovariatesC1.1], nlevels) == 1)))
dfTrain1.1 = dfTrain1.1[ , vCov1.1]
lapply(vLabels[1], function(label) {
try(glm(as.formula(paste(label, "~", paste0(vCov1.1, collapse = "+"))),
data = dfTrain1.1), silent = TRUE)
})
vCovariatesC1.1 = intersect(vCovariatesC, vCov1.1)
dfTrain1.1 = dfTrain[, c("service_a", vCov1.1)]
dfTrain1.1 = dfTrain1.1[complete.cases(dfTrain1.1), ]
dfTrain1.1[, vCovariatesC1.1] = lapply(dfTrain1.1[, vCovariatesC1.1], as.factor)
vCov1.1 = setdiff(vCov1.1, names(which(sapply(dfTrain1.1[, vCovariatesC1.1], nlevels) == 1)))
dfTrain1.1 = dfTrain1.1[ , c("service_a", vCov1.1)]
lapply(vLabels[1], function(label) {
try(glm(as.formula(paste(label, "~", paste0(vCov1.1, collapse = "+"))),
data = dfTrain1.1), silent = TRUE)
})
rm(list = ls())
# load the data
dfTrainValues = read.csv("Data/cef07265-8623-4680-b501-a5688f5babb0/train_values.csv", stringsAsFactors = FALSE)
dfTrainLabels = read.csv("Data/cef07265-8623-4680-b501-a5688f5babb0/train_labels.csv", stringsAsFactors = FALSE)
dfTrain = merge(dfTrainLabels, dfTrainValues, by = "id")
dfTestValues = read.csv("Data/cef07265-8623-4680-b501-a5688f5babb0/test_values.csv")
# create the regressor groups by name
vCovariatesN = grep("^n_", names(dfTrain), value = TRUE)
vCovariatesC = grep("^c_", names(dfTrain), value = TRUE)
vCovariatesO = grep("^o_", names(dfTrain), value = TRUE)
vCovariates = c(vCovariatesC, vCovariatesN, vCovariatesN)
vLabels = grep("^service_", names(dfTrain), value = TRUE)
# convert all the labels to factor variables
dfTrain[, vLabels] = lapply(dfTrain[, vLabels], as.factor)
# check the categorical variables
dfTrainCF = lapply(dfTrain[, vCovariatesC], function(x) as.factor(x))
levelsCovariatesC = sapply(dfTrainCF, nlevels)
hist(levelsCovariatesC, breaks = min(levelsCovariatesC):max(levelsCovariatesC))
# get a sense of the missingness in the data
vMissing = sapply(dfTrain[, vCovariates], function(x) mean(is.na(x)))
hist(vMissing)
plot(density(vMissing, from = 0, to = 1))
# model 1.1: only use the variables for which the missingness is < 0.25
vCov1.1 = vCovariates[vMissing < 0.2]
# the categorical covariates to retain in the model --> as.factor
vCovariatesC1.1 = intersect(vCovariatesC, vCov1.1)
dfTrain1.1 = dfTrain[, c("service_a", vCov1.1)]
dfTrain1.1 = dfTrain1.1[complete.cases(dfTrain1.1), ]
dfTrain1.1[, vCovariatesC1.1] = lapply(dfTrain1.1[, vCovariatesC1.1], as.factor)
vCov1.1 = setdiff(vCov1.1, names(which(sapply(dfTrain1.1[, vCovariatesC1.1], nlevels) == 1)))
dfTrain1.1 = dfTrain1.1[ , c("service_a", vCov1.1)]
temp = lapply(vLabels[1], function(label) {
glm(as.formula(paste(label, "~", paste0(vCov1.1, collapse = "+"))),
data = dfTrain1.1, model = FALSE, x = FALSE, y = FALSE)
})
temp[[1]]
dfTrain1.1$service_a
rm(list = ls())
# load the data
dfTrainValues = read.csv("Data/cef07265-8623-4680-b501-a5688f5babb0/train_values.csv", stringsAsFactors = FALSE)
dfTrainLabels = read.csv("Data/cef07265-8623-4680-b501-a5688f5babb0/train_labels.csv", stringsAsFactors = FALSE)
dfTrain = merge(dfTrainLabels, dfTrainValues, by = "id")
dfTestValues = read.csv("Data/cef07265-8623-4680-b501-a5688f5babb0/test_values.csv")
vCovariatesN = grep("^n_", names(dfTrain), value = TRUE)
vCovariatesC = grep("^c_", names(dfTrain), value = TRUE)
vCovariatesO = grep("^o_", names(dfTrain), value = TRUE)
vCovariates = c(vCovariatesC, vCovariatesN, vCovariatesN)
dfTrain[, vLabels] = lapply(dfTrain[, vLabels], as.factor)
# check the categorical variables
dfTrainCF = lapply(dfTrain[, vCovariatesC], function(x) as.factor(x))
levelsCovariatesC = sapply(dfTrainCF, nlevels)
hist(levelsCovariatesC, breaks = min(levelsCovariatesC):max(levelsCovariatesC))
# get a sense of the missingness in the data
vMissing = sapply(dfTrain[, vCovariates], function(x) mean(is.na(x)))
hist(vMissing)
plot(density(vMissing, from = 0, to = 1))
vLabels = grep("^service_", names(dfTrain), value = TRUE)
dfTrain = merge(dfTrainLabels, dfTrainValues, by = "id")
dfTrainCF = lapply(dfTrain[, vCovariatesC], function(x) as.factor(x))
levelsCovariatesC = sapply(dfTrainCF, nlevels)
hist(levelsCovariatesC, breaks = min(levelsCovariatesC):max(levelsCovariatesC))
# get a sense of the missingness in the data
vMissing = sapply(dfTrain[, vCovariates], function(x) mean(is.na(x)))
hist(vMissing)
plot(density(vMissing, from = 0, to = 1))
vCov1.1 = vCovariates[vMissing < 0.2]
# the categorical covariates to retain in the model --> as.factor
vCovariatesC1.1 = intersect(vCovariatesC, vCov1.1)
dfTrain1.1 = dfTrain[, c("service_a", vCov1.1)]
dfTrain1.1 = dfTrain1.1[complete.cases(dfTrain1.1), ]
dfTrain1.1[, vCovariatesC1.1] = lapply(dfTrain1.1[, vCovariatesC1.1], as.factor)
vCov1.1 = setdiff(vCov1.1, names(which(sapply(dfTrain1.1[, vCovariatesC1.1], nlevels) == 1)))
dfTrain1.1 = dfTrain1.1[ , c("service_a", vCov1.1)]
temp = lapply(vLabels[1], function(label) {
glm(as.formula(paste(label, "~", paste0(vCov1.1, collapse = "+"))),
data = dfTrain1.1, model = FALSE, x = FALSE, y = FALSE)
})
summary(temp[[1]])
length(coef(temp[[1]]))
library(glmnet)
install.packages("glmnet")
library(glmnet)
?glmnet
?model.response
?glmnet
liGLMNet1.1 = lapply(vLabels, function(label) {
fLogit1.1 = as.formula(paste(label, "~", paste0(vCov1.1, collapse = "+")))
cv.glmnet(x = model.matrix(fLogit1.1, data = dfTrain1.1),
y = model.response(fLogit1.1, data = dfTrain1.1),
family = "binomial", type.measure = "auc")
})
error()
errors()
liGLMNet1.1 = lapply(vLabels, function(label) {
fLogit1.1 = as.formula(paste(label, "~", paste0(vCov1.1, collapse = "+")))
cv.glmnet(x = model.matrix(fLogit1.1, data = dfTrain1.1),
y = model.response(fLogit1.1, data = dfTrain1.1),
family = "binomial", type.measure = "auc")
})
liGLMNet1.1 = lapply(vLabels, function(label) {
fLogit1.1 = as.formula(paste(label, "~", paste0(vCov1.1, collapse = "+")))
cv.glmnet(x = model.matrix(fLogit1.1, data = dfTrain1.1),
y = model.response(fLogit1.1, data = dfTrain1.1)[, , drop = FALSE],
family = "binomial", type.measure = "auc")
})
fLogit1.1 = as.formula(paste("service_a", "~", paste0(vCov1.1, collapse = "+")))
mean(model.response(fLogit1.1, data = dfTrain1.1))
model.response(fLogit1.1, data = dfTrain1.1))
model.response(fLogit1.1, data = dfTrain1.1)
fLogit1.1
head(dfTrain1.1[, 1:5])
head(dfTrain1.1[, 1:10])
View(dfTrain1.1[, 1:10])
source('~/Projects/Personal/Kaggle/drivendata-CountableDecisions/Code/00-DataPreparation.R')
vCov1.1 = vCovariates[vMissing < 0.2]
vCovariatesC1.1 = intersect(vCovariatesC, vCov1.1)
dfTrain1.1 = dfTrain[, c("service_a", vCov1.1)]
dfTrain1.1 = dfTrain1.1[complete.cases(dfTrain1.1), ]
dfTrain1.1[, vCovariatesC1.1] = lapply(dfTrain1.1[, vCovariatesC1.1], as.factor)
vCov1.1 = setdiff(vCov1.1, names(which(sapply(dfTrain1.1[, vCovariatesC1.1], nlevels) == 1)))
dfTrain1.1 = dfTrain1.1[ , c("service_a", vCov1.1)]
View(dfTrain1.1)
?as.factor
dfTrain1.1[, vCovariatesC1.1] = lapply(dfTrain1.1[, vCovariatesC1.1], as.factor, exclude = " ")
source('~/Projects/Personal/Kaggle/drivendata-CountableDecisions/Code/00-DataPreparation.R')
# model 1.1: only use the variables for which the missingness is < 0.25
vCov1.1 = vCovariates[vMissing < 0.2]
# the categorical covariates to retain in the model --> as.factor
vCovariatesC1.1 = intersect(vCovariatesC, vCov1.1)
dfTrain1.1 = dfTrain[, c("service_a", vCov1.1)]
dfTrain1.1 = dfTrain1.1[complete.cases(dfTrain1.1), ]
dfTrain1.1[, vCovariatesC1.1] = lapply(dfTrain1.1[, vCovariatesC1.1], as.factor, exclude = " ")
vCov1.1 = setdiff(vCov1.1, names(which(sapply(dfTrain1.1[, vCovariatesC1.1], nlevels) == 1)))
dfTrain1.1 = dfTrain1.1[ , c("service_a", vCov1.1)]
dfTrain1.1[, vCovariatesC1.1] = lapply(dfTrain1.1[, vCovariatesC1.1], function(x) as.factor(x, exclude = " "))
dfTrain1.1[, vCovariatesC1.1] = lapply(dfTrain1.1[, vCovariatesC1.1], function(x) factor(x, exclude = " "))
vCov1.1 = setdiff(vCov1.1, names(which(sapply(dfTrain1.1[, vCovariatesC1.1], nlevels) == 1)))
dfTrain1.1 = dfTrain1.1[ , c("service_a", vCov1.1)]
View(dfTrain1.1)
dfTrain1.1$c_0332
?read.csv
dfTrainValues = read.csv("Data/cef07265-8623-4680-b501-a5688f5babb0/train_values.csv", stringsAsFactors = FALSE,
na.strings = " ")
dfTrainLabels = read.csv("Data/cef07265-8623-4680-b501-a5688f5babb0/train_labels.csv", stringsAsFactors = FALSE,
na.strings = " ")
dfTrain = merge(dfTrainLabels, dfTrainValues, by = "id")
dfTestValues = read.csv("Data/cef07265-8623-4680-b501-a5688f5babb0/test_values.csv", stringsAsFactors = FALSE,
na.strings = " ")
vCovariatesN = grep("^n_", names(dfTrain), value = TRUE)
vCovariatesC = grep("^c_", names(dfTrain), value = TRUE)
vCovariatesO = grep("^o_", names(dfTrain), value = TRUE)
vCovariates = c(vCovariatesC, vCovariatesN, vCovariatesN)
vLabels = grep("^service_", names(dfTrain), value = TRUE)
# convert all the labels to factor variables
# dfTrain[, vLabels] = lapply(dfTrain[, vLabels], as.factor)
# check the categorical variables
dfTrainCF = lapply(dfTrain[, vCovariatesC], function(x) as.factor(x))
levelsCovariatesC = sapply(dfTrainCF, nlevels)
hist(levelsCovariatesC, breaks = min(levelsCovariatesC):max(levelsCovariatesC))
# get a sense of the missingness in the data
vMissing = sapply(dfTrain[, vCovariates], function(x) mean(is.na(x)))
hist(vMissing)
plot(density(vMissing, from = 0, to = 1))
# model 1.1: only use the variables for which the missingness is < 0.25
vCov1.1 = vCovariates[vMissing < 0.2]
# the categorical covariates to retain in the model --> as.factor
vCovariatesC1.1 = intersect(vCovariatesC, vCov1.1)
dfTrain1.1 = dfTrain[, c("service_a", vCov1.1)]
dfTrain1.1 = dfTrain1.1[complete.cases(dfTrain1.1), ]
dfTrain1.1[, vCovariatesC1.1] = lapply(dfTrain1.1[, vCovariatesC1.1], as.factor)
vCov1.1 = setdiff(vCov1.1, names(which(sapply(dfTrain1.1[, vCovariatesC1.1], nlevels) == 1)))
dfTrain1.1 = dfTrain1.1[ , c("service_a", vCov1.1)]
View(dfTrain1.1)
dfTrainValues = read.csv("Data/cef07265-8623-4680-b501-a5688f5babb0/train_values.csv", stringsAsFactors = FALSE,
na.strings = "")
dfTrainLabels = read.csv("Data/cef07265-8623-4680-b501-a5688f5babb0/train_labels.csv", stringsAsFactors = FALSE,
na.strings = "")
dfTrain = merge(dfTrainLabels, dfTrainValues, by = "id")
dfTestValues = read.csv("Data/cef07265-8623-4680-b501-a5688f5babb0/test_values.csv", stringsAsFactors = FALSE,
na.strings = "")
source('~/.active-rstudio-document', echo=TRUE)
View(dfTrain)
View(dfTrain[, vCovariatesC])
# model 1.1: only use the variables for which the missingness is < 0.25
vCov1.1 = vCovariates[vMissing < 0.2]
# the categorical covariates to retain in the model --> as.factor
vCovariatesC1.1 = intersect(vCovariatesC, vCov1.1)
dfTrain1.1 = dfTrain[, c("service_a", vCov1.1)]
dfTrain1.1 = dfTrain1.1[complete.cases(dfTrain1.1), ]
dfTrain1.1[, vCovariatesC1.1] = lapply(dfTrain1.1[, vCovariatesC1.1], as.factor)
vCov1.1 = setdiff(vCov1.1, names(which(sapply(dfTrain1.1[, vCovariatesC1.1], nlevels) == 1)))
dfTrain1.1 = dfTrain1.1[ , c("service_a", vCov1.1)]
View(dfTrain1.1)
liLogit1.1 = lapply(vLabels, function(label) {
glm(as.formula(paste(label, "~", paste0(vCov1.1, collapse = "+"))),
data = dfTrain1.1, model = FALSE, x = FALSE, y = FALSE, family = binomial(link = logit))
})
source('~/Projects/Personal/Kaggle/drivendata-CountableDecisions/Code/01-LogitModels.R')
liLogit1.1 = lapply(vLabels[1], function(label) {
glm(as.formula(paste(label, "~", paste0(vCov1.1, collapse = "+"))),
data = dfTrain1.1, model = FALSE, x = FALSE, y = FALSE, family = binomial(link = logit))
})
coef(liLogit1.1)
coef(liLogit1.1[[1]])
makeModelData = function(dfOriginal, threshMiss = 0.2) {
vCovariatesN = grep("^n_", names(dfOriginal), value = TRUE)
vCovariatesC = grep("^c_", names(dfOriginal), value = TRUE)
vCovariatesO = grep("^o_", names(dfOriginal), value = TRUE)
vCovariates = c(vCovariatesC, vCovariatesN, vCovariatesN)
vLabels = grep("^service_", names(dfOriginal), value = TRUE)
vMissing = sapply(dfOriginal[, vCovariates], function(x) mean(is.na(x)))
vCovFinal = vCovariates[vMissing < 0.2]
# the categorical covariates to retain in the model --> as.factor
vCovariatesCFinal = intersect(vCovariatesC, vCovFinal)
dfFinal = dfOriginal[, c(vLabels, vCovFinal)]
dfFinal = dfFinal[complete.cases(dfFinal), ]
dfFinal[, vCovariatesCFinal] = lapply(dfFinal[, vCovariatesCFinal], as.factor)
vCovFinal = setdiff(vCovFinal, names(which(sapply(dfFinal[, vCovariatesCFinal], nlevels) == 1)))
dfFinal = dfFinal[ , c(vLabels, vCovFinal)]
return(dfFinal)
}
dfTrainLogit = makeModelData(dfTrain, 0.2)
View(dfTrainLogit)
makeModelData = function(dfOriginal, threshMiss = 0.2) {
vCovariatesN = grep("^n_", names(dfOriginal), value = TRUE)
vCovariatesC = grep("^c_", names(dfOriginal), value = TRUE)
vCovariatesO = grep("^o_", names(dfOriginal), value = TRUE)
vCovariates = c(vCovariatesC, vCovariatesN, vCovariatesN)
vLabels = grep("^service_", names(dfOriginal), value = TRUE)
vMissing = sapply(dfOriginal[, vCovariates], function(x) mean(is.na(x)))
vCovFinal = vCovariates[vMissing < 0.2]
# the categorical covariates to retain in the model --> as.factor
vCovariatesCFinal = intersect(vCovariatesC, vCovFinal)
dfFinal = dfOriginal[, c(vLabels, vCovFinal)]
dfFinal = dfFinal[complete.cases(dfFinal), ]
dfFinal[, vCovariatesCFinal] = lapply(dfFinal[, vCovariatesCFinal], as.factor)
vCovFinal = setdiff(vCovFinal, names(which(sapply(dfFinal[, vCovariatesCFinal], nlevels) == 1)))
dfFinal = dfFinal[ , c(vLabels, vCovFinal)]
return(dfFinal)
}
dfTrainLogit = makeModelData(dfTrain, 0.2)
source('~/.active-rstudio-document')
modelDataLogit = makeModelData(dfTrain, 0.2)
dfTrainLogit = modelDataLogit$data
vCovLogit = modelDataLogit$covariates
liLogit = lapply(vLabels, function(label) {
glm(as.formula(paste(label, "~", paste0(vCovLogit, collapse = "+"))),
data = dfTrainLogit, model = FALSE, x = FALSE, y = FALSE, family = binomial(link = logit))
})
warnings()
library(ROCR)
install.packages("ROCR")
library(pROC)
install.packages("pROC")
library(ROCR)
library(pROC)
liLogit[[1]]$terms
install.packages(c("ROCR", "formula.tools", "pROC", "caret"))
install.packages("caret")
install.packages("ROCR")
